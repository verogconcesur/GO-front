import { Component, Input, Output, EventEmitter } from '@angular/core';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common";
import * as i2 from "@angular/material/button";
import * as i3 from "@angular/material/icon";
import * as i4 from "@ngx-translate/core";
export class CustomDialogButtonsWrapperComponent {
    constructor() {
        this.buttonClick = new EventEmitter();
    }
    ngOnInit() { }
}
CustomDialogButtonsWrapperComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.2.3", ngImport: i0, type: CustomDialogButtonsWrapperComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
CustomDialogButtonsWrapperComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "14.2.3", type: CustomDialogButtonsWrapperComponent, selector: "app-custom-dialog-buttons-wrapper", inputs: { buttons: "buttons" }, outputs: { buttonClick: "buttonClick" }, ngImport: i0, template: "<button\r\n    mat-button\r\n    *ngFor=\"let button of buttons\"\r\n    [class]=\"'custom-dialog__button ' + button.getClass()\"\r\n    [color]=\"button.color\"\r\n    [disabled]=\"button.disabledFn()\"\r\n    [style.visibility]=\"button.hiddenFn() ? 'hidden' : 'visible'\"\r\n    (click)=\"buttonClick.emit(button)\"\r\n>\r\n    <mat-icon *ngIf=\"button.iconName && button.iconPosition === 'start'\" [fontSet]=\"button.iconFontSet\">{{\r\n        button.iconName\r\n    }}</mat-icon>\r\n    <span *ngIf=\"button.label\"> {{ button.label | translate }}</span>\r\n    <mat-icon *ngIf=\"button.iconName && button.iconPosition === 'end'\" [fontSet]=\"button.iconFontSet\">{{\r\n        button.iconName\r\n    }}</mat-icon>\r\n</button>\r\n", styles: ["button.custom-dialog__button{margin:0 5px 5px}button.custom-dialog__button:first-child{margin-left:0}button.custom-dialog__button:last-child{margin-right:0}\n"], dependencies: [{ kind: "directive", type: i1.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: i1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "component", type: i2.MatButton, selector: "button[mat-button], button[mat-raised-button], button[mat-icon-button],             button[mat-fab], button[mat-mini-fab], button[mat-stroked-button],             button[mat-flat-button]", inputs: ["disabled", "disableRipple", "color"], exportAs: ["matButton"] }, { kind: "component", type: i3.MatIcon, selector: "mat-icon", inputs: ["color", "inline", "svgIcon", "fontSet", "fontIcon"], exportAs: ["matIcon"] }, { kind: "pipe", type: i4.TranslatePipe, name: "translate" }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.2.3", ngImport: i0, type: CustomDialogButtonsWrapperComponent, decorators: [{
            type: Component,
            args: [{ selector: 'app-custom-dialog-buttons-wrapper', template: "<button\r\n    mat-button\r\n    *ngFor=\"let button of buttons\"\r\n    [class]=\"'custom-dialog__button ' + button.getClass()\"\r\n    [color]=\"button.color\"\r\n    [disabled]=\"button.disabledFn()\"\r\n    [style.visibility]=\"button.hiddenFn() ? 'hidden' : 'visible'\"\r\n    (click)=\"buttonClick.emit(button)\"\r\n>\r\n    <mat-icon *ngIf=\"button.iconName && button.iconPosition === 'start'\" [fontSet]=\"button.iconFontSet\">{{\r\n        button.iconName\r\n    }}</mat-icon>\r\n    <span *ngIf=\"button.label\"> {{ button.label | translate }}</span>\r\n    <mat-icon *ngIf=\"button.iconName && button.iconPosition === 'end'\" [fontSet]=\"button.iconFontSet\">{{\r\n        button.iconName\r\n    }}</mat-icon>\r\n</button>\r\n", styles: ["button.custom-dialog__button{margin:0 5px 5px}button.custom-dialog__button:first-child{margin-left:0}button.custom-dialog__button:last-child{margin-right:0}\n"] }]
        }], ctorParameters: function () { return []; }, propDecorators: { buttons: [{
                type: Input
            }], buttonClick: [{
                type: Output
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3VzdG9tLWRpYWxvZy1idXR0b25zLXdyYXBwZXIuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvY3VzdG9tLWRpYWxvZy9zcmMvbGliL2NvbXBvbmVudHMvY3VzdG9tLWRpYWxvZy1idXR0b25zLXdyYXBwZXIvY3VzdG9tLWRpYWxvZy1idXR0b25zLXdyYXBwZXIuY29tcG9uZW50LnRzIiwiLi4vLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvY3VzdG9tLWRpYWxvZy9zcmMvbGliL2NvbXBvbmVudHMvY3VzdG9tLWRpYWxvZy1idXR0b25zLXdyYXBwZXIvY3VzdG9tLWRpYWxvZy1idXR0b25zLXdyYXBwZXIuY29tcG9uZW50Lmh0bWwiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFNBQVMsRUFBVSxLQUFLLEVBQUUsTUFBTSxFQUFFLFlBQVksRUFBRSxNQUFNLGVBQWUsQ0FBQzs7Ozs7O0FBUS9FLE1BQU0sT0FBTyxtQ0FBbUM7SUFLOUM7UUFIVSxnQkFBVyxHQUNuQixJQUFJLFlBQVksRUFBRSxDQUFDO0lBRU4sQ0FBQztJQUVoQixRQUFRLEtBQVUsQ0FBQzs7Z0lBUFIsbUNBQW1DO29IQUFuQyxtQ0FBbUMsa0pDUmhELG11QkFpQkE7MkZEVGEsbUNBQW1DO2tCQUwvQyxTQUFTOytCQUNFLG1DQUFtQzswRUFLcEMsT0FBTztzQkFBZixLQUFLO2dCQUNJLFdBQVc7c0JBQXBCLE1BQU0iLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQsIE9uSW5pdCwgSW5wdXQsIE91dHB1dCwgRXZlbnRFbWl0dGVyIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IEN1c3RvbURpYWxvZ0J1dHRvbkNvbmZpZyB9IGZyb20gJy4uLy4uL21vZGVscy9jdXN0b20tZGlhbG9nLWJ1dHRvbi1jb25maWcnO1xyXG5cclxuQENvbXBvbmVudCh7XHJcbiAgc2VsZWN0b3I6ICdhcHAtY3VzdG9tLWRpYWxvZy1idXR0b25zLXdyYXBwZXInLFxyXG4gIHRlbXBsYXRlVXJsOiAnLi9jdXN0b20tZGlhbG9nLWJ1dHRvbnMtd3JhcHBlci5jb21wb25lbnQuaHRtbCcsXHJcbiAgc3R5bGVVcmxzOiBbJy4vY3VzdG9tLWRpYWxvZy1idXR0b25zLXdyYXBwZXIuY29tcG9uZW50LnNjc3MnXSxcclxufSlcclxuZXhwb3J0IGNsYXNzIEN1c3RvbURpYWxvZ0J1dHRvbnNXcmFwcGVyQ29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0IHtcclxuICBASW5wdXQoKSBidXR0b25zITogQ3VzdG9tRGlhbG9nQnV0dG9uQ29uZmlnW107XHJcbiAgQE91dHB1dCgpIGJ1dHRvbkNsaWNrOiBFdmVudEVtaXR0ZXI8Q3VzdG9tRGlhbG9nQnV0dG9uQ29uZmlnPiA9XHJcbiAgICBuZXcgRXZlbnRFbWl0dGVyKCk7XHJcblxyXG4gIGNvbnN0cnVjdG9yKCkge31cclxuXHJcbiAgbmdPbkluaXQoKTogdm9pZCB7fVxyXG59XHJcbiIsIjxidXR0b25cclxuICAgIG1hdC1idXR0b25cclxuICAgICpuZ0Zvcj1cImxldCBidXR0b24gb2YgYnV0dG9uc1wiXHJcbiAgICBbY2xhc3NdPVwiJ2N1c3RvbS1kaWFsb2dfX2J1dHRvbiAnICsgYnV0dG9uLmdldENsYXNzKClcIlxyXG4gICAgW2NvbG9yXT1cImJ1dHRvbi5jb2xvclwiXHJcbiAgICBbZGlzYWJsZWRdPVwiYnV0dG9uLmRpc2FibGVkRm4oKVwiXHJcbiAgICBbc3R5bGUudmlzaWJpbGl0eV09XCJidXR0b24uaGlkZGVuRm4oKSA/ICdoaWRkZW4nIDogJ3Zpc2libGUnXCJcclxuICAgIChjbGljayk9XCJidXR0b25DbGljay5lbWl0KGJ1dHRvbilcIlxyXG4+XHJcbiAgICA8bWF0LWljb24gKm5nSWY9XCJidXR0b24uaWNvbk5hbWUgJiYgYnV0dG9uLmljb25Qb3NpdGlvbiA9PT0gJ3N0YXJ0J1wiIFtmb250U2V0XT1cImJ1dHRvbi5pY29uRm9udFNldFwiPnt7XHJcbiAgICAgICAgYnV0dG9uLmljb25OYW1lXHJcbiAgICB9fTwvbWF0LWljb24+XHJcbiAgICA8c3BhbiAqbmdJZj1cImJ1dHRvbi5sYWJlbFwiPiB7eyBidXR0b24ubGFiZWwgfCB0cmFuc2xhdGUgfX08L3NwYW4+XHJcbiAgICA8bWF0LWljb24gKm5nSWY9XCJidXR0b24uaWNvbk5hbWUgJiYgYnV0dG9uLmljb25Qb3NpdGlvbiA9PT0gJ2VuZCdcIiBbZm9udFNldF09XCJidXR0b24uaWNvbkZvbnRTZXRcIj57e1xyXG4gICAgICAgIGJ1dHRvbi5pY29uTmFtZVxyXG4gICAgfX08L21hdC1pY29uPlxyXG48L2J1dHRvbj5cclxuIl19