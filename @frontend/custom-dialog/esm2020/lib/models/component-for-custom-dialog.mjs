/**
 * @abstract @class ComponentToExtendForCustomDialog
 * @override confirmCloseCustomDialog function
 * @override onSubmitCustomDialog function
 * @override setAndGetFooterConfig function
 */
export class ComponentToExtendForCustomDialog {
    /**
     * @constructor ComponentToExtendForCustomDialog
     * @param MODAL_ID id used to reference the dialog modal
     * @param MODAL_PANEL_CLASS class used in the dialog modal
     * @param MODAL_TITLE? title for the modal
     */
    constructor(MODAL_ID, MODAL_PANEL_CLASS, MODAL_TITLE) {
        this.MODAL_ID = MODAL_ID;
        this.MODAL_PANEL_CLASS = MODAL_PANEL_CLASS;
        this.MODAL_TITLE = MODAL_TITLE;
        //Data passed from customDialogService
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        this.extendedComponentData = null;
        //If component is created throgh CustomDialgoService modalModeActive is set to true
        this.modalModeActive = false;
    }
    //If component is created throgh CustomDialgoService this function is called
    setModalModeActive(active) {
        this.modalModeActive = active;
    }
    /**
     * isModalModeActive
     *
     * @returns boolean if modal mode is active
     */
    isModalModeActive() {
        return this.modalModeActive;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tcG9uZW50LWZvci1jdXN0b20tZGlhbG9nLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvY3VzdG9tLWRpYWxvZy9zcmMvbGliL21vZGVscy9jb21wb25lbnQtZm9yLWN1c3RvbS1kaWFsb2cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBR0E7Ozs7O0dBS0c7QUFDSCxNQUFNLE9BQWdCLGdDQUFnQztJQU9wRDs7Ozs7T0FLRztJQUNILFlBQW1CLFFBQWdCLEVBQVMsaUJBQXlCLEVBQVMsV0FBb0I7UUFBL0UsYUFBUSxHQUFSLFFBQVEsQ0FBUTtRQUFTLHNCQUFpQixHQUFqQixpQkFBaUIsQ0FBUTtRQUFTLGdCQUFXLEdBQVgsV0FBVyxDQUFTO1FBWmxHLHNDQUFzQztRQUN0Qyw4REFBOEQ7UUFDdkQsMEJBQXFCLEdBQVEsSUFBSSxDQUFDO1FBQ3pDLG1GQUFtRjtRQUMzRSxvQkFBZSxHQUFHLEtBQUssQ0FBQztJQVFxRSxDQUFDO0lBRXRHLDRFQUE0RTtJQUNyRSxrQkFBa0IsQ0FBQyxNQUFlO1FBQ3ZDLElBQUksQ0FBQyxlQUFlLEdBQUcsTUFBTSxDQUFDO0lBQ2hDLENBQUM7SUFFRDs7OztPQUlHO0lBQ0ksaUJBQWlCO1FBQ3RCLE9BQU8sSUFBSSxDQUFDLGVBQWUsQ0FBQztJQUM5QixDQUFDO0NBNkJGIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnO1xyXG5pbXBvcnQgeyBDdXN0b21EaWFsb2dGb290ZXJDb25maWdJIH0gZnJvbSAnLi4vaW50ZXJmYWNlcy9jdXN0b20tZGlhbG9nLWZvb3Rlci1jb25maWcnO1xyXG5cclxuLyoqXHJcbiAqIEBhYnN0cmFjdCBAY2xhc3MgQ29tcG9uZW50VG9FeHRlbmRGb3JDdXN0b21EaWFsb2dcclxuICogQG92ZXJyaWRlIGNvbmZpcm1DbG9zZUN1c3RvbURpYWxvZyBmdW5jdGlvblxyXG4gKiBAb3ZlcnJpZGUgb25TdWJtaXRDdXN0b21EaWFsb2cgZnVuY3Rpb25cclxuICogQG92ZXJyaWRlIHNldEFuZEdldEZvb3RlckNvbmZpZyBmdW5jdGlvblxyXG4gKi9cclxuZXhwb3J0IGFic3RyYWN0IGNsYXNzIENvbXBvbmVudFRvRXh0ZW5kRm9yQ3VzdG9tRGlhbG9nIHtcclxuICAvL0RhdGEgcGFzc2VkIGZyb20gY3VzdG9tRGlhbG9nU2VydmljZVxyXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XHJcbiAgcHVibGljIGV4dGVuZGVkQ29tcG9uZW50RGF0YTogYW55ID0gbnVsbDtcclxuICAvL0lmIGNvbXBvbmVudCBpcyBjcmVhdGVkIHRocm9naCBDdXN0b21EaWFsZ29TZXJ2aWNlIG1vZGFsTW9kZUFjdGl2ZSBpcyBzZXQgdG8gdHJ1ZVxyXG4gIHByaXZhdGUgbW9kYWxNb2RlQWN0aXZlID0gZmFsc2U7XHJcblxyXG4gIC8qKlxyXG4gICAqIEBjb25zdHJ1Y3RvciBDb21wb25lbnRUb0V4dGVuZEZvckN1c3RvbURpYWxvZ1xyXG4gICAqIEBwYXJhbSBNT0RBTF9JRCBpZCB1c2VkIHRvIHJlZmVyZW5jZSB0aGUgZGlhbG9nIG1vZGFsXHJcbiAgICogQHBhcmFtIE1PREFMX1BBTkVMX0NMQVNTIGNsYXNzIHVzZWQgaW4gdGhlIGRpYWxvZyBtb2RhbFxyXG4gICAqIEBwYXJhbSBNT0RBTF9USVRMRT8gdGl0bGUgZm9yIHRoZSBtb2RhbFxyXG4gICAqL1xyXG4gIGNvbnN0cnVjdG9yKHB1YmxpYyBNT0RBTF9JRDogc3RyaW5nLCBwdWJsaWMgTU9EQUxfUEFORUxfQ0xBU1M6IHN0cmluZywgcHVibGljIE1PREFMX1RJVExFPzogc3RyaW5nKSB7fVxyXG5cclxuICAvL0lmIGNvbXBvbmVudCBpcyBjcmVhdGVkIHRocm9naCBDdXN0b21EaWFsZ29TZXJ2aWNlIHRoaXMgZnVuY3Rpb24gaXMgY2FsbGVkXHJcbiAgcHVibGljIHNldE1vZGFsTW9kZUFjdGl2ZShhY3RpdmU6IGJvb2xlYW4pOiB2b2lkIHtcclxuICAgIHRoaXMubW9kYWxNb2RlQWN0aXZlID0gYWN0aXZlO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogaXNNb2RhbE1vZGVBY3RpdmVcclxuICAgKlxyXG4gICAqIEByZXR1cm5zIGJvb2xlYW4gaWYgbW9kYWwgbW9kZSBpcyBhY3RpdmVcclxuICAgKi9cclxuICBwdWJsaWMgaXNNb2RhbE1vZGVBY3RpdmUoKTogYm9vbGVhbiB7XHJcbiAgICByZXR1cm4gdGhpcy5tb2RhbE1vZGVBY3RpdmU7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBjb25maXJtQ2xvc2VDdXN0b21EaWFsb2dcclxuICAgKlxyXG4gICAqIElmIHRoZXJlJ3Mgbm90aGluZyB0byBjaGVjayBvdmVycmlkZSB0aGUgZnVuY3Rpb24gc2VuZGluZzogb2YodHJ1ZSlcclxuICAgKlxyXG4gICAqIEByZXR1cm5zIE9ic2VydmFibGU8Ym9vbGVhbj46IGlmIGV2ZXJ5dGhpbmcgaXMgb2sgc2VuZCB0cnVlIHRvIGNsb3NlIG1vZGFsXHJcbiAgICovXHJcbiAgcHVibGljIGFic3RyYWN0IGNvbmZpcm1DbG9zZUN1c3RvbURpYWxvZygpOiBPYnNlcnZhYmxlPGJvb2xlYW4+O1xyXG5cclxuICAvKipcclxuICAgKiBvblN1Ym1pdEN1c3RvbURpYWxvZ1xyXG4gICAqXHJcbiAgICogSWYgdGhlcmUncyBub3RoaW5nIHRvIGNoZWNrIG92ZXJyaWRlIHRoZSBmdW5jdGlvbiBzZW5kaW5nOiBvZih0cnVlKVxyXG4gICAqXHJcbiAgICogQHJldHVybnMgT2JzZXJ2YWJsZTxhbnk+OiBpZiBldmVyeXRoaW5nIGlzIG9rIHNlbmQgdHJ1ZSBvciBhbnkgZGF0YSAhPT0gbnVsbCwgdW5kZWZpbmVkLCAwIG9yICcnIHRvIGNsb3NlIG1vZGFsXHJcbiAgICovXHJcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcclxuICBwdWJsaWMgYWJzdHJhY3Qgb25TdWJtaXRDdXN0b21EaWFsb2coKTogT2JzZXJ2YWJsZTxhbnk+O1xyXG5cclxuICAvKipcclxuICAgKiBzZXRBbmRHZXRGb290ZXJDb25maWdcclxuICAgKlxyXG4gICAqIElmIHRoZXJlJ3Mgbm8gZm9vdGVyIG9uIHRoZSBtb2RhbCBvdmVycmlkZSB0aGUgZnVuY3Rpb24gc2VuZGluZzogbnVsbFxyXG4gICAqXHJcbiAgICogQHJldHVybnMgIEN1c3RvbURpYWxvZ0Zvb3RlckNvbmZpZ0kgfCBudWxsXHJcbiAgICovXHJcbiAgcHVibGljIGFic3RyYWN0IHNldEFuZEdldEZvb3RlckNvbmZpZygpOiBDdXN0b21EaWFsb2dGb290ZXJDb25maWdJIHwgbnVsbDtcclxufVxyXG4iXX0=