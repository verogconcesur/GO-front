import { Component, Input } from '@angular/core';
import { tap } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "../services/bread-crumbs.service";
import * as i2 from "@angular/router";
import * as i3 from "@angular/common";
import * as i4 from "@angular/material/button";
import * as i5 from "@angular/material/icon";
import * as i6 from "@angular/flex-layout/extended";
export class BreadCrumbsComponent {
    constructor(breadcrumbService, router) {
        this.breadcrumbService = breadcrumbService;
        this.router = router;
        this.customClasses = [];
        this.showBackButton = () => this.backButtonConfig?.hidden ? false : true;
        this.getBackButtonColor = () => this.backButtonConfig?.color ? this.backButtonConfig?.color : 'primary';
        this.getBackButtonClass = () => this.backButtonConfig?.class ? this.backButtonConfig?.class : '';
        this.getBackButtonIconName = () => this.backButtonConfig?.iconName
            ? this.backButtonConfig?.iconName
            : 'keyboard_arrow_left';
        this.getBackButtonIconFontset = () => this.backButtonConfig?.iconFontSet
            ? this.backButtonConfig?.iconFontSet
            : '';
        this.getBreadcrumbFontSet = (breadcrumb) => breadcrumb?.iconFontSet ? breadcrumb.iconFontSet : '';
        this.breadcrumbs$ = this.breadcrumbService.breadcrumbs$.pipe(tap((data) => {
            if (data.length >= 2) {
                this.backUrl = data[data.length - 2].url;
            }
        }));
    }
    goBack() {
        this.router.navigateByUrl(this.backUrl);
    }
}
BreadCrumbsComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.2.3", ngImport: i0, type: BreadCrumbsComponent, deps: [{ token: i1.BreadCrumbsService }, { token: i2.Router }], target: i0.ɵɵFactoryTarget.Component });
BreadCrumbsComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "14.2.3", type: BreadCrumbsComponent, selector: "jenga-bread-crumbs", inputs: { customClasses: "customClasses", backButtonConfig: "backButtonConfig" }, ngImport: i0, template: "<div\r\n  class=\"breadcrumbs breadcrumbs-default-style\"\r\n  [ngClass]=\"customClasses\"\r\n  *ngIf=\"(breadcrumbs$ | async)?.length\"\r\n>\r\n  <button\r\n    mat-flat-button\r\n    *ngIf=\"showBackButton()\"\r\n    [color]=\"getBackButtonColor()\"\r\n    [class]=\"\r\n      'breadcrumbs__back-button mat-square-icon square-28 ' +\r\n      getBackButtonClass()\r\n    \"\r\n    (click)=\"goBack()\"\r\n  >\r\n    <mat-icon [fontSet]=\"getBackButtonIconFontset()\">{{\r\n      getBackButtonIconName()\r\n    }}</mat-icon>\r\n  </button>\r\n  <ul>\r\n    <li\r\n      *ngFor=\"let breadcrumb of breadcrumbs$ | async\"\r\n      [routerLink]=\"breadcrumb.url\"\r\n    >\r\n      <mat-icon\r\n        *ngIf=\"breadcrumb.iconName && breadcrumb.iconPosition === 'start'\"\r\n        [fontSet]=\"getBreadcrumbFontSet(breadcrumb)\"\r\n        >{{ breadcrumb.iconName }}</mat-icon\r\n      >\r\n      <span *ngIf=\"breadcrumb.label\">\r\n        {{ breadcrumb.label }}\r\n      </span>\r\n      <mat-icon\r\n        *ngIf=\"breadcrumb.iconName && breadcrumb.iconPosition === 'end'\"\r\n        [fontSet]=\"getBreadcrumbFontSet(breadcrumb)\"\r\n        >{{ breadcrumb.iconName }}</mat-icon\r\n      >\r\n    </li>\r\n  </ul>\r\n</div>\r\n", styles: [".breadcrumbs{display:flex;justify-content:flex-start;align-items:center}.breadcrumbs__back-button{margin-right:15px}.breadcrumbs ul{list-style:none;margin:0;padding:0}.breadcrumbs ul li{display:inline;cursor:pointer}.breadcrumbs button.mat-square-icon{border-radius:5px;padding:0;min-width:36px;line-height:36px}.breadcrumbs button.mat-square-icon.square-28{min-width:28px;line-height:28px}.breadcrumbs.breadcrumbs-default-style ul{padding:20px 0}.breadcrumbs.breadcrumbs-default-style ul li:before{content:\"/\";margin:0 3px;cursor:auto}.breadcrumbs.breadcrumbs-default-style ul li:first-child:before{content:\"\";margin:0}.breadcrumbs.breadcrumbs-default-style ul li:last-child{font-weight:700}.breadcrumbs.breadcrumbs-default-style ul li:last-child:before{font-weight:200}\n"], dependencies: [{ kind: "directive", type: i3.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { kind: "directive", type: i3.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: i3.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: i2.RouterLink, selector: ":not(a):not(area)[routerLink]", inputs: ["queryParams", "fragment", "queryParamsHandling", "state", "relativeTo", "preserveFragment", "skipLocationChange", "replaceUrl", "routerLink"] }, { kind: "component", type: i4.MatButton, selector: "button[mat-button], button[mat-raised-button], button[mat-icon-button],             button[mat-fab], button[mat-mini-fab], button[mat-stroked-button],             button[mat-flat-button]", inputs: ["disabled", "disableRipple", "color"], exportAs: ["matButton"] }, { kind: "component", type: i5.MatIcon, selector: "mat-icon", inputs: ["color", "inline", "svgIcon", "fontSet", "fontIcon"], exportAs: ["matIcon"] }, { kind: "directive", type: i6.DefaultClassDirective, selector: "  [ngClass], [ngClass.xs], [ngClass.sm], [ngClass.md], [ngClass.lg], [ngClass.xl],  [ngClass.lt-sm], [ngClass.lt-md], [ngClass.lt-lg], [ngClass.lt-xl],  [ngClass.gt-xs], [ngClass.gt-sm], [ngClass.gt-md], [ngClass.gt-lg]", inputs: ["ngClass", "ngClass.xs", "ngClass.sm", "ngClass.md", "ngClass.lg", "ngClass.xl", "ngClass.lt-sm", "ngClass.lt-md", "ngClass.lt-lg", "ngClass.lt-xl", "ngClass.gt-xs", "ngClass.gt-sm", "ngClass.gt-md", "ngClass.gt-lg"] }, { kind: "pipe", type: i3.AsyncPipe, name: "async" }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.2.3", ngImport: i0, type: BreadCrumbsComponent, decorators: [{
            type: Component,
            args: [{ selector: 'jenga-bread-crumbs', template: "<div\r\n  class=\"breadcrumbs breadcrumbs-default-style\"\r\n  [ngClass]=\"customClasses\"\r\n  *ngIf=\"(breadcrumbs$ | async)?.length\"\r\n>\r\n  <button\r\n    mat-flat-button\r\n    *ngIf=\"showBackButton()\"\r\n    [color]=\"getBackButtonColor()\"\r\n    [class]=\"\r\n      'breadcrumbs__back-button mat-square-icon square-28 ' +\r\n      getBackButtonClass()\r\n    \"\r\n    (click)=\"goBack()\"\r\n  >\r\n    <mat-icon [fontSet]=\"getBackButtonIconFontset()\">{{\r\n      getBackButtonIconName()\r\n    }}</mat-icon>\r\n  </button>\r\n  <ul>\r\n    <li\r\n      *ngFor=\"let breadcrumb of breadcrumbs$ | async\"\r\n      [routerLink]=\"breadcrumb.url\"\r\n    >\r\n      <mat-icon\r\n        *ngIf=\"breadcrumb.iconName && breadcrumb.iconPosition === 'start'\"\r\n        [fontSet]=\"getBreadcrumbFontSet(breadcrumb)\"\r\n        >{{ breadcrumb.iconName }}</mat-icon\r\n      >\r\n      <span *ngIf=\"breadcrumb.label\">\r\n        {{ breadcrumb.label }}\r\n      </span>\r\n      <mat-icon\r\n        *ngIf=\"breadcrumb.iconName && breadcrumb.iconPosition === 'end'\"\r\n        [fontSet]=\"getBreadcrumbFontSet(breadcrumb)\"\r\n        >{{ breadcrumb.iconName }}</mat-icon\r\n      >\r\n    </li>\r\n  </ul>\r\n</div>\r\n", styles: [".breadcrumbs{display:flex;justify-content:flex-start;align-items:center}.breadcrumbs__back-button{margin-right:15px}.breadcrumbs ul{list-style:none;margin:0;padding:0}.breadcrumbs ul li{display:inline;cursor:pointer}.breadcrumbs button.mat-square-icon{border-radius:5px;padding:0;min-width:36px;line-height:36px}.breadcrumbs button.mat-square-icon.square-28{min-width:28px;line-height:28px}.breadcrumbs.breadcrumbs-default-style ul{padding:20px 0}.breadcrumbs.breadcrumbs-default-style ul li:before{content:\"/\";margin:0 3px;cursor:auto}.breadcrumbs.breadcrumbs-default-style ul li:first-child:before{content:\"\";margin:0}.breadcrumbs.breadcrumbs-default-style ul li:last-child{font-weight:700}.breadcrumbs.breadcrumbs-default-style ul li:last-child:before{font-weight:200}\n"] }]
        }], ctorParameters: function () { return [{ type: i1.BreadCrumbsService }, { type: i2.Router }]; }, propDecorators: { customClasses: [{
                type: Input
            }], backButtonConfig: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnJlYWQtY3J1bWJzLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2JyZWFkLWNydW1icy9zcmMvbGliL2NvbXBvbmVudC9icmVhZC1jcnVtYnMuY29tcG9uZW50LnRzIiwiLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvYnJlYWQtY3J1bWJzL3NyYy9saWIvY29tcG9uZW50L2JyZWFkLWNydW1icy5jb21wb25lbnQuaHRtbCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUdqRCxPQUFPLEVBQUUsR0FBRyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7Ozs7Ozs7O0FBVXJDLE1BQU0sT0FBTyxvQkFBb0I7SUFPL0IsWUFDbUIsaUJBQXFDLEVBQzlDLE1BQWM7UUFETCxzQkFBaUIsR0FBakIsaUJBQWlCLENBQW9CO1FBQzlDLFdBQU0sR0FBTixNQUFNLENBQVE7UUFSZixrQkFBYSxHQUFhLEVBQUUsQ0FBQztRQXVCL0IsbUJBQWMsR0FBRyxHQUFZLEVBQUUsQ0FDcEMsSUFBSSxDQUFDLGdCQUFnQixFQUFFLE1BQU0sQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUM7UUFDeEMsdUJBQWtCLEdBQUcsR0FBVyxFQUFFLENBQ3ZDLElBQUksQ0FBQyxnQkFBZ0IsRUFBRSxLQUFLLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxnQkFBZ0IsRUFBRSxLQUFLLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQztRQUVuRSx1QkFBa0IsR0FBRyxHQUFXLEVBQUUsQ0FDdkMsSUFBSSxDQUFDLGdCQUFnQixFQUFFLEtBQUssQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLGdCQUFnQixFQUFFLEtBQUssQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDO1FBRTVELDBCQUFxQixHQUFHLEdBQVcsRUFBRSxDQUMxQyxJQUFJLENBQUMsZ0JBQWdCLEVBQUUsUUFBUTtZQUM3QixDQUFDLENBQUMsSUFBSSxDQUFDLGdCQUFnQixFQUFFLFFBQVE7WUFDakMsQ0FBQyxDQUFDLHFCQUFxQixDQUFDO1FBRXJCLDZCQUF3QixHQUFHLEdBQVcsRUFBRSxDQUM3QyxJQUFJLENBQUMsZ0JBQWdCLEVBQUUsV0FBVztZQUNoQyxDQUFDLENBQUMsSUFBSSxDQUFDLGdCQUFnQixFQUFFLFdBQVc7WUFDcEMsQ0FBQyxDQUFDLEVBQUUsQ0FBQztRQUVGLHlCQUFvQixHQUFHLENBQUMsVUFBc0IsRUFBVSxFQUFFLENBQy9ELFVBQVUsRUFBRSxXQUFXLENBQUMsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQztRQWhDdEQsSUFBSSxDQUFDLFlBQVksR0FBRyxJQUFJLENBQUMsaUJBQWlCLENBQUMsWUFBWSxDQUFDLElBQUksQ0FDMUQsR0FBRyxDQUFDLENBQUMsSUFBa0IsRUFBRSxFQUFFO1lBQ3pCLElBQUksSUFBSSxDQUFDLE1BQU0sSUFBSSxDQUFDLEVBQUU7Z0JBQ3BCLElBQUksQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDO2FBQzFDO1FBQ0gsQ0FBQyxDQUFDLENBQ0gsQ0FBQztJQUNKLENBQUM7SUFFTSxNQUFNO1FBQ1gsSUFBSSxDQUFDLE1BQU0sQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBQzFDLENBQUM7O2lIQXRCVSxvQkFBb0I7cUdBQXBCLG9CQUFvQiw0SUNiakMsaXRDQXdDQTsyRkQzQmEsb0JBQW9CO2tCQUxoQyxTQUFTOytCQUNFLG9CQUFvQjs4SEFLckIsYUFBYTtzQkFBckIsS0FBSztnQkFDRyxnQkFBZ0I7c0JBQXhCLEtBQUsiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQsIElucHV0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IFJvdXRlciB9IGZyb20gJ0Bhbmd1bGFyL3JvdXRlcic7XHJcbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICdyeGpzJztcclxuaW1wb3J0IHsgdGFwIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xyXG5pbXBvcnQgeyBCcmVhZGNydW1iQmFja0J1dHRvbkNvbmZpZ0kgfSBmcm9tICcuLi9pbnRlcmZhY2VzL2JyZWFkLWNydW1icy1iYWNrLWJ1dHRvbi1jb25maWcuaW50ZXJmYWNlJztcclxuaW1wb3J0IHsgQnJlYWRjcnVtYiB9IGZyb20gJy4uL21vZGVscy9icmVhZC1jcnVtYnMubW9kZWwnO1xyXG5pbXBvcnQgeyBCcmVhZENydW1ic1NlcnZpY2UgfSBmcm9tICcuLi9zZXJ2aWNlcy9icmVhZC1jcnVtYnMuc2VydmljZSc7XHJcblxyXG5AQ29tcG9uZW50KHtcclxuICBzZWxlY3RvcjogJ2plbmdhLWJyZWFkLWNydW1icycsXHJcbiAgdGVtcGxhdGVVcmw6ICcuL2JyZWFkLWNydW1icy5jb21wb25lbnQuaHRtbCcsXHJcbiAgc3R5bGVVcmxzOiBbJy4vYnJlYWQtY3J1bWJzLmNvbXBvbmVudC5zY3NzJ10sXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBCcmVhZENydW1ic0NvbXBvbmVudCB7XHJcbiAgQElucHV0KCkgY3VzdG9tQ2xhc3Nlczogc3RyaW5nW10gPSBbXTtcclxuICBASW5wdXQoKSBiYWNrQnV0dG9uQ29uZmlnITogQnJlYWRjcnVtYkJhY2tCdXR0b25Db25maWdJO1xyXG5cclxuICBicmVhZGNydW1icyQ6IE9ic2VydmFibGU8QnJlYWRjcnVtYltdPjtcclxuICBwcml2YXRlIGJhY2tVcmwhOiBzdHJpbmc7XHJcblxyXG4gIGNvbnN0cnVjdG9yKFxyXG4gICAgcHJpdmF0ZSByZWFkb25seSBicmVhZGNydW1iU2VydmljZTogQnJlYWRDcnVtYnNTZXJ2aWNlLFxyXG4gICAgcHJpdmF0ZSByb3V0ZXI6IFJvdXRlclxyXG4gICkge1xyXG4gICAgdGhpcy5icmVhZGNydW1icyQgPSB0aGlzLmJyZWFkY3J1bWJTZXJ2aWNlLmJyZWFkY3J1bWJzJC5waXBlKFxyXG4gICAgICB0YXAoKGRhdGE6IEJyZWFkY3J1bWJbXSkgPT4ge1xyXG4gICAgICAgIGlmIChkYXRhLmxlbmd0aCA+PSAyKSB7XHJcbiAgICAgICAgICB0aGlzLmJhY2tVcmwgPSBkYXRhW2RhdGEubGVuZ3RoIC0gMl0udXJsO1xyXG4gICAgICAgIH1cclxuICAgICAgfSlcclxuICAgICk7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgZ29CYWNrKCk6IHZvaWQge1xyXG4gICAgdGhpcy5yb3V0ZXIubmF2aWdhdGVCeVVybCh0aGlzLmJhY2tVcmwpO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIHNob3dCYWNrQnV0dG9uID0gKCk6IGJvb2xlYW4gPT5cclxuICAgIHRoaXMuYmFja0J1dHRvbkNvbmZpZz8uaGlkZGVuID8gZmFsc2UgOiB0cnVlO1xyXG4gIHB1YmxpYyBnZXRCYWNrQnV0dG9uQ29sb3IgPSAoKTogc3RyaW5nID0+XHJcbiAgICB0aGlzLmJhY2tCdXR0b25Db25maWc/LmNvbG9yID8gdGhpcy5iYWNrQnV0dG9uQ29uZmlnPy5jb2xvciA6ICdwcmltYXJ5JztcclxuXHJcbiAgcHVibGljIGdldEJhY2tCdXR0b25DbGFzcyA9ICgpOiBzdHJpbmcgPT5cclxuICAgIHRoaXMuYmFja0J1dHRvbkNvbmZpZz8uY2xhc3MgPyB0aGlzLmJhY2tCdXR0b25Db25maWc/LmNsYXNzIDogJyc7XHJcblxyXG4gIHB1YmxpYyBnZXRCYWNrQnV0dG9uSWNvbk5hbWUgPSAoKTogc3RyaW5nID0+XHJcbiAgICB0aGlzLmJhY2tCdXR0b25Db25maWc/Lmljb25OYW1lXHJcbiAgICAgID8gdGhpcy5iYWNrQnV0dG9uQ29uZmlnPy5pY29uTmFtZVxyXG4gICAgICA6ICdrZXlib2FyZF9hcnJvd19sZWZ0JztcclxuXHJcbiAgcHVibGljIGdldEJhY2tCdXR0b25JY29uRm9udHNldCA9ICgpOiBzdHJpbmcgPT5cclxuICAgIHRoaXMuYmFja0J1dHRvbkNvbmZpZz8uaWNvbkZvbnRTZXRcclxuICAgICAgPyB0aGlzLmJhY2tCdXR0b25Db25maWc/Lmljb25Gb250U2V0XHJcbiAgICAgIDogJyc7XHJcblxyXG4gIHB1YmxpYyBnZXRCcmVhZGNydW1iRm9udFNldCA9IChicmVhZGNydW1iOiBCcmVhZGNydW1iKTogc3RyaW5nID0+XHJcbiAgICBicmVhZGNydW1iPy5pY29uRm9udFNldCA/IGJyZWFkY3J1bWIuaWNvbkZvbnRTZXQgOiAnJztcclxufVxyXG4iLCI8ZGl2XHJcbiAgY2xhc3M9XCJicmVhZGNydW1icyBicmVhZGNydW1icy1kZWZhdWx0LXN0eWxlXCJcclxuICBbbmdDbGFzc109XCJjdXN0b21DbGFzc2VzXCJcclxuICAqbmdJZj1cIihicmVhZGNydW1icyQgfCBhc3luYyk/Lmxlbmd0aFwiXHJcbj5cclxuICA8YnV0dG9uXHJcbiAgICBtYXQtZmxhdC1idXR0b25cclxuICAgICpuZ0lmPVwic2hvd0JhY2tCdXR0b24oKVwiXHJcbiAgICBbY29sb3JdPVwiZ2V0QmFja0J1dHRvbkNvbG9yKClcIlxyXG4gICAgW2NsYXNzXT1cIlxyXG4gICAgICAnYnJlYWRjcnVtYnNfX2JhY2stYnV0dG9uIG1hdC1zcXVhcmUtaWNvbiBzcXVhcmUtMjggJyArXHJcbiAgICAgIGdldEJhY2tCdXR0b25DbGFzcygpXHJcbiAgICBcIlxyXG4gICAgKGNsaWNrKT1cImdvQmFjaygpXCJcclxuICA+XHJcbiAgICA8bWF0LWljb24gW2ZvbnRTZXRdPVwiZ2V0QmFja0J1dHRvbkljb25Gb250c2V0KClcIj57e1xyXG4gICAgICBnZXRCYWNrQnV0dG9uSWNvbk5hbWUoKVxyXG4gICAgfX08L21hdC1pY29uPlxyXG4gIDwvYnV0dG9uPlxyXG4gIDx1bD5cclxuICAgIDxsaVxyXG4gICAgICAqbmdGb3I9XCJsZXQgYnJlYWRjcnVtYiBvZiBicmVhZGNydW1icyQgfCBhc3luY1wiXHJcbiAgICAgIFtyb3V0ZXJMaW5rXT1cImJyZWFkY3J1bWIudXJsXCJcclxuICAgID5cclxuICAgICAgPG1hdC1pY29uXHJcbiAgICAgICAgKm5nSWY9XCJicmVhZGNydW1iLmljb25OYW1lICYmIGJyZWFkY3J1bWIuaWNvblBvc2l0aW9uID09PSAnc3RhcnQnXCJcclxuICAgICAgICBbZm9udFNldF09XCJnZXRCcmVhZGNydW1iRm9udFNldChicmVhZGNydW1iKVwiXHJcbiAgICAgICAgPnt7IGJyZWFkY3J1bWIuaWNvbk5hbWUgfX08L21hdC1pY29uXHJcbiAgICAgID5cclxuICAgICAgPHNwYW4gKm5nSWY9XCJicmVhZGNydW1iLmxhYmVsXCI+XHJcbiAgICAgICAge3sgYnJlYWRjcnVtYi5sYWJlbCB9fVxyXG4gICAgICA8L3NwYW4+XHJcbiAgICAgIDxtYXQtaWNvblxyXG4gICAgICAgICpuZ0lmPVwiYnJlYWRjcnVtYi5pY29uTmFtZSAmJiBicmVhZGNydW1iLmljb25Qb3NpdGlvbiA9PT0gJ2VuZCdcIlxyXG4gICAgICAgIFtmb250U2V0XT1cImdldEJyZWFkY3J1bWJGb250U2V0KGJyZWFkY3J1bWIpXCJcclxuICAgICAgICA+e3sgYnJlYWRjcnVtYi5pY29uTmFtZSB9fTwvbWF0LWljb25cclxuICAgICAgPlxyXG4gICAgPC9saT5cclxuICA8L3VsPlxyXG48L2Rpdj5cclxuIl19